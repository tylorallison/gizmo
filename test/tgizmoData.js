import { EvtSystem, ExtEvtEmitter, ExtEvtReceiver } from '../js/event.js';
import { Fmt } from '../js/fmt.js';
import { GizmoData, GizmoArray, GizmoObject } from '../js/gizmoData.js';

const gClass = GizmoData;
//const gSetter = (o, k, v) => gClass.set(o, k, v);
const gSetter = (o, k, v) => o[k] = v;

describe('gizmo data', () => {

    it('autogenerated fields can be specified for all changes to data', ()=>{
        class TAuto extends gClass {
            static { gClass.schema(this, 'sdata', { dflt: 1 }); };
            static { gClass.schema(this, 'adata', { autogen: true, generator: (o,x,v) => o.sdata*2 }); };
        };
        let gzd = new TAuto();
        expect(gzd.sdata).toEqual(1);
        expect(gzd.adata).toEqual(2);
        gSetter(gzd, 'sdata', 4);
        expect(gzd.sdata).toEqual(4);
        expect(gzd.adata).toEqual(8);
    });

    it('autogenerated fields can be specified for all a specific field', ()=>{
        class TAuto extends gClass {
            static { gClass.schema(this, 'sdata1', { dflt: 1 }); };
            static { gClass.schema(this, 'sdata2', { dflt: 2 }); };
            static { gClass.schema(this, 'adata', { autogen: (k) => k === 'sdata1', generator: (o,x,v) => o.sdata1*o.sdata2 }); };
        };
        let gzd = new TAuto();
        expect(gzd.sdata1).toEqual(1);
        expect(gzd.sdata2).toEqual(2);
        expect(gzd.adata).toEqual(2);
        gSetter(gzd, 'sdata1', 4);
        expect(gzd.sdata1).toEqual(4);
        expect(gzd.sdata2).toEqual(2);
        expect(gzd.adata).toEqual(8);
        gSetter(gzd, 'sdata2', 3);
        expect(gzd.sdata1).toEqual(4);
        expect(gzd.sdata2).toEqual(3);
        expect(gzd.adata).toEqual(8);
    });

    it('autogenerated fields can be specified for sub data', ()=>{
        class TSub extends gClass {
            static { gClass.schema(this, 'sdata', { dflt: 1 }); };
        };
        class TAuto extends gClass {
            static { gClass.schema(this, 'sub', { link: true }); };
            static { gClass.schema(this, 'other', { dflt: 2 }); };
            static { gClass.schema(this, 'adata', { autogen: (k) => k === 'sub', generator: (o,x,v) => o.sub.sdata*o.other }); };
        };
        let gzd = new TAuto({ sub: new TSub() });
        expect(gzd.adata).toEqual(2);
        gSetter(gzd.sub, 'sdata', 4);
        expect(gzd.adata).toEqual(8);
        gSetter(gzd, 'other', 3);
        expect(gzd.adata).toEqual(8);
        gSetter(gzd.sub, 'sdata', 5);
        expect(gzd.adata).toEqual(15);
    });

    it('root changes trigger events', ()=>{
        class TLeaf extends gClass {
            static { gClass.schema(this, 'data'); }
            static { gClass.schema(this, 'ndata', { eventable: false }); }
            static { ExtEvtEmitter.apply(this) }
        };
        let o = new TLeaf({data: 'foo', ndata: 'ok'});
        expect(o.data).toEqual('foo');
        let receiver = ExtEvtReceiver.gen();
        let tevt;
        EvtSystem.listen(o, receiver, 'gizmo.set', (evt) => tevt = evt);
        gSetter(o, 'data', 'bar');
        expect(tevt.tag).toEqual('gizmo.set');
        expect(tevt.actor).toBe(o);
        expect(tevt.set['data']).toEqual('bar');
        tevt = undefined;
        gSetter(o, 'ndata', 'bar');
        expect(tevt).toBeFalsy();
        expect(o.ndata).toEqual('bar');
    });

    it('leaf changes trigger events', ()=>{
        class TLeaf extends gClass {
            static { gClass.schema(this, 'data'); };
            static { gClass.schema(this, 'ndata', { eventable: false }); };
        };
        class TRoot extends gClass {
            static { gClass.schema(this, 'sub', { link: true }); }
            static { gClass.schema(this, 'nsub', { link: true, eventable: false }); }
            static { ExtEvtEmitter.apply(this); }
        };
        let o = new TRoot({sub: new TLeaf({data: 'foo', ndata: 'nfoo'}), nsub: new TLeaf({data: 'nfoo'})});
        expect(o.sub.data).toEqual('foo');
        expect(o.sub.ndata).toEqual('nfoo');
        let receiver = ExtEvtReceiver.gen();
        let tevt = {};
        EvtSystem.listen(o, receiver, 'gizmo.set', (evt) => tevt = evt);
        gSetter(o.sub, 'data', 'bar');
        expect(tevt.tag).toEqual('gizmo.set');
        expect(tevt.actor).toBe(o);
        expect(tevt.set['sub.data']).toEqual('bar');
        tevt = {};
        gSetter(o.sub, 'ndata', 'bar');
        expect(tevt).toEqual({});
        gSetter(o.nsub, 'data', 'nv2');
        expect(tevt).toEqual({});
        let l = o.sub;
        gSetter(o, 'sub', null);
        tevt = {};
        l.data = 'v2';
        gSetter(l, 'data', 'v2');
        expect(tevt).toEqual({});
        expect(l.data).toEqual('v2');
    });

});

describe('a gizmo array', () => {
    class TRef extends gClass {
        static { 
            gClass.schema(this, 'items', { link: 'array', parser: () => new GizmoArray() }); 
            gClass.schema(this, 'auto', { autogen: (k) => k === 'items', generator: (o,x,v) => {
                return (o.items.length) ? 'hello:there' : 'wait';
            }}); 
            ExtEvtEmitter.apply(this)
        };
    };
    let gzd, receiver, tevt;
    beforeEach(() => {
        gzd = new TRef();
        receiver = ExtEvtReceiver.gen();
        EvtSystem.listen(gzd, receiver, 'gizmo.set', (evt) => tevt = evt);
    });

    it('causes gizmo events when k/v set', ()=>{
        gzd.items[0] = 'foo';
        expect(tevt.tag).toEqual('gizmo.set');
        expect(tevt.actor).toBe(gzd);
        expect(tevt.set['items.0']).toEqual('foo');
        expect(gzd.items[0]).toEqual('foo');
    });

    it('causes gizmo events when items pushed', ()=>{
        gzd.items.push('foo');
        expect(tevt.tag).toEqual('gizmo.set');
        expect(tevt.actor).toBe(gzd);
        expect(tevt.set['items.0']).toEqual('foo');
        expect(gzd.items[0]).toEqual('foo');
        gzd.items.push('bar', 'baz');
        expect(tevt.set['items.2']).toEqual('baz');
    });

    it('causes gizmo events when items unshifted', ()=>{
        gzd.items.unshift('foo');
        expect(tevt.tag).toEqual('gizmo.set');
        expect(tevt.actor).toBe(gzd);
        expect(tevt.set['items.0']).toEqual('foo');
        expect(gzd.items[0]).toEqual('foo');
        gzd.items.unshift('bar', 'baz');
        expect(tevt.set['items.1']).toEqual('baz');
        expect(gzd.items[0]).toEqual('bar');
        expect(gzd.items[1]).toEqual('baz');
        expect(gzd.items[2]).toEqual('foo');
        expect(gzd.items.length).toEqual(3);
    });

    it('causes gizmo events when items popped', ()=>{
        gzd.items.push('foo', 'bar', 'baz');
        let v = gzd.items.pop();
        expect(v).toEqual('baz');
        expect(tevt.tag).toEqual('gizmo.set');
        expect(tevt.actor).toBe(gzd);
        expect(tevt.set['items.2']).toEqual(undefined);
        expect(gzd.items.length).toEqual(2);
        expect(gzd.items[0]).toEqual('foo');
        expect(gzd.items[1]).toEqual('bar');
        v = gzd.items.pop();
        expect(v).toEqual('bar');
        expect(gzd.items.length).toEqual(1);
    });

    it('causes gizmo events when items shifted', ()=>{
        gzd.items.push('foo', 'bar', 'baz');
        let v = gzd.items.shift();
        expect(v).toEqual('foo');
        expect(tevt.tag).toEqual('gizmo.set');
        expect(tevt.actor).toBe(gzd);
        expect(tevt.set['items.0']).toEqual(undefined);
        expect(gzd.items.length).toEqual(2);
        expect(gzd.items[0]).toEqual('bar');
        expect(gzd.items[1]).toEqual('baz');
        v = gzd.items.shift();
        expect(v).toEqual('bar');
        expect(gzd.items.length).toEqual(1);
    });

    it('causes gizmo events when items spliced', ()=>{
        gzd.items.push('foo', 'bar', 'baz');
        let v = gzd.items.splice(1, 1);
        expect(tevt.tag).toEqual('gizmo.set');
        expect(tevt.actor).toBe(gzd);
        expect(tevt.set['items.1']).toEqual(undefined);
        expect(v).toEqual(['bar']);
        expect(gzd.items[0]).toEqual('foo');
        expect(gzd.items[1]).toEqual('baz');
        expect(gzd.items.length).toEqual(2);
        v = gzd.items.splice(1, 0, 'hello', 'there');
        expect(v).toEqual([]);
        expect(gzd.items[0]).toEqual('foo');
        expect(gzd.items[1]).toEqual('hello');
        expect(gzd.items[2]).toEqual('there');
        expect(gzd.items[3]).toEqual('baz');
        expect(tevt.set['items.2']).toEqual('there');
        expect(gzd.items.length).toEqual(4);
        v = gzd.items.splice(1, 1, 'nihao');
        expect(v).toEqual(['hello']);
        expect(gzd.items.length).toEqual(4);
        expect(gzd.items[1]).toEqual('nihao');
        expect(tevt.set['items.1']).toEqual('nihao');
        v = gzd.items.splice(1, 2, 'hola');
        expect(v).toEqual(['nihao', 'there']);
        expect(gzd.items.length).toEqual(3);
        expect(tevt.set['items.2']).toEqual(undefined);
        expect(gzd.items[0]).toEqual('foo');
        expect(gzd.items[1]).toEqual('hola');
        expect(gzd.items[2]).toEqual('baz');
    });

});

describe('a gizmo map', () => {
    class TRef extends gClass {
        static { 
            gClass.schema(this, 'atts', { link: 'map', parser: () => { return new GizmoObject() }}); 
            ExtEvtEmitter.apply(this)
        };
    };
    let gzd, receiver, tevt = {};
    beforeEach(() => {
        gzd = new TRef();
        receiver = ExtEvtReceiver.gen();
        EvtSystem.listen(gzd, receiver, 'gizmo.set', (evt) => tevt = evt);
        EvtSystem.listen(gzd, receiver, 'gizmo.delete', (evt) => tevt = evt);
    });

    it('causes gizmo events when k/v set', ()=>{
        gzd.atts['foo'] = 'bar';
        expect(tevt.tag).toEqual('gizmo.set');
        expect(tevt.actor).toBe(gzd);
        expect(tevt.set['atts.foo']).toEqual('bar');
    });

    it('causes gizmo events when k deleted', ()=>{
        gzd.atts['foo'] = 'bar';
        delete gzd.atts['foo'];
        expect(tevt.tag).toEqual('gizmo.set');
        expect(tevt.actor).toBe(gzd);
        expect(tevt.set['atts.foo']).toEqual(undefined);
        expect(gzd.atts.foo).toBeFalsy();
    });

    it('can use gizmodata.set', ()=>{
        gSetter(gzd.atts, 'foo', 'bar');
        expect(gzd.atts.foo).toBeTruthy();
        expect(tevt.tag).toEqual('gizmo.set');
        expect(tevt.actor).toBe(gzd);
        expect(tevt.set['atts.foo']).toEqual('bar');
    });

});