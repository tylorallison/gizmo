import { EvtSystem, ExtEvtEmitter, ExtEvtReceiver } from '../js/event.js';
import { Schema } from '../js/schema.js';
import { Vect } from '../js/vect.js';

class tdata {
    static registry = {};
    static init() {
        if (!this.name in this.registry) {
            this.registry[this.name] = this;
        }
    }
    constructor(spec={}, applySchema=true) {
        this.constructor.init();
    }
}

class handler {
    constructor(pspec, pclass) {
        this.pspec = pspec;
        this.pclass = pclass;
        this.links = new WeakMap();
        this.get = this.iget;
        this.set = this.iset;
        this.pathEventable = false;
        this.pathUpdatable = false;
        this.pathAutogen = false;
        this.pathReadonly = false;
    }

    linkUpdate(target, trunk, link, seen=new WeakSet()) {
        if (seen.has(target)) return;
        seen.add(target);
        if (trunk) {
            pathEventable = link.schema.eventable && trunk.$pathEventable;
            pathUpdatable = !schema.nopathgen && (schema.atUpdate || trunk.$pathUpdatable);
            //pathAutogen = !schema.nopathgen && (schema.autogendeps.size || trunk.$pathAutogen);
            pathAutogen = (schema.autogendeps.size || trunk.$pathAutogen);
            pathReadonly = schema.readonly || trunk.$pathReadonly;
        } else {
            pathEventable = true;
            pathUpdatable = false;
            pathAutogen = false;
            pathReadonly = false;
        }
        for (const aschema of Object.values(this.constructor.schema)) {
            let att = this[aschema.key];
            if (att && att instanceof GizmoData) {
                att.$linkUpdate(seen);
            }
        }
    }

    // -- defines method to set new trunk link
    link(target, trunk, schema, keyer) {
        let link = { linker: this, schema: schema, keyer: keyer};
        this.links.set(trunk, link);
        // update path variables for this node and all dependent branch nodes
        this.linkUpdate(target, trunk, link)
        target.atLink(trunk);
        // regenerate updates to autogenerated fields
        /*
        for (const agk of this.constructor.$autogenKeys) {
            let agschema = this.constructor.schema[agk];
            if (typeof agschema.autogen === 'function' && !agschema.autogen('$trunk')) continue;
            // reset autogenerated value to default, setter will take care of updating value
            if (agk in this) this[agk] = '#autogen#';
        }
        if (this.$pathAutogen) {
            for (const gzt of this.constructor.eachInPath(this, (gzn) => (gzn.$schema && gzn.$schema.autogendeps.size))) {
                for (const agk of gzt.$schema.autogendeps) if (agk in gzt.$trunk) gzt.$trunk[agk] = '#autogen#';
            }
        }
        */

    }

    unlink(target, trunk) {

        // -- defines method to unset trunk link
        Object.defineProperty(this, '$unlink', {
            get: () => (() => {
                let oldTrunk = trunk;
                trunk = null;
                schema = null;
                // update path variables for this node and all dependent branch nodes
                this.$linkUpdate()
                this.atUnlink(oldTrunk);
                // regenerate updates to autogenerated fields
                for (const agk of this.constructor.$autogenKeys) {
                    let agschema = this.constructor.schema[agk];
                    if (typeof agschema.autogen === 'function' && !agschema.autogen('$trunk')) continue;
                    // reset autogenerated value to default, setter will take care of updating value
                    if (agk in this) this[agk] = '#autogen#';
                }
            }),
        })

    }
        
    passthruGet(target, key, receiver) {
        const value = target[key];
        if (value instanceof Function) {
            return function (...args) {
                return value.apply(this === receiver ? target : this, args);
            };
        }
        return value;
    }
    passthruSet(target, key, value) {
        target[key] = value;
        return true;
    }
    iget(target, key, receiver) {
        let schema = this.pclass.schema[key];
        if (schema && schema.getter) return schema.getter(target, this.pspec);
        if (key === '$link') return (trunk, schema, keyer) => this.link(target, trunk, schema, keyer);
        if (key === '$unlink') return (trunk) => this.unlink(target, trunk);
        const value = target[key];
        if (value instanceof Function) {
            return function (...args) {
                return value.apply(this === receiver ? target : this, args);
            };
        }
        return target[key];
    };
    iset(target, key, value) {
        let schema = this.pclass.schema[key];
        if (!schema && !Object.is(target[key], value)) {
            target[key] = value;
            return true;
        }
        if (schema.setter) {
            value = schema.setter(target, this.pspec, value);
        }
        let storedValue = target[key];
        if (!Object.is(storedValue, value)) {
            if (schema.link) {
                if (storedValue) storedValue.$unlink(this);
                target[key] = newValue;
                if (newValue) newValue.$link(this, schema);
            } else {
                target[key] = value;
            }
        }

        // trigger update if attribute is eventable
        if (schema && schema.eventable && this.pathEventable) {
            // find event emitter in path
            let root = gzd.constructor.root(gzd);
            // emit
            if (EvtSystem.isEmitter(root)) {
                let path = gzd.constructor.path(gzd);
                let key = (path) ? `${path}.${schema.key}` : schema.key;
                let renderable = schema.renderable || gzd.constructor.findInPath(gzd, (gzn) => gzn.$schema && gzn.$schema.renderable);                             
                EvtSystem.trigger(root, 'gizmo.set', { set: { [key]: storedValue }, render: renderable });
            }
        }

        return true;
    };
}

class tproxy {
    static registry = new Map();
    static init() {
        this.registry.set(this.name, this);
    }
    static get schema() {
        if (!this.hasOwnProperty('_schema')) this._schema = Object.assign({}, Object.getPrototypeOf(this)._schema);
        return this._schema;
    }
    static get schemas() {
        if (!this.hasOwnProperty('_schemas')) this._schemas = Object.values(this.schema);
        return this._schemas;
    }
    constructor(spec={}) {
        this.constructor.init();
        for (const schema of this.constructor.schemas) {
            this[schema.key] = schema.parser(this, spec);
        }
        let h = new handler(spec, this.constructor);
        return new Proxy(this, h);
    }
    atLink(trunk) {
    }
    atUnlink(trunk) {
    }
}

class tVect1 extends Vect { }

class tVect2 {
    constructor(x,y) {
        this.x = x;
        this.y = y;
    }
}

class tVect3 {
    static registry = {};
    static init() {
        if (!this.name in this.registry) {
            this.registry[this.name] = this;
        }
    }
    constructor(x,y) {
        this.constructor.init();
        this.x = x;
        this.y = y;
    }
}

class tVect4 extends tdata {
    constructor(x,y) {
        super();
        Object.defineProperty(this, 'x', {
            enumerable: true,
            get: () => x,
            set: (v) => x = v,
        });
        Object.defineProperty(this, 'y', {
            enumerable: true,
            get: () => y,
            set: (v) => y = v,
        });
    }
}

class tVect5 extends tproxy {
    static {
        Schema.apply(this, 'x', { dflt: 0 });
        Schema.apply(this, 'y', { dflt: 0 });
    }
    constructor(x=0,y=0) {
        return super({x:x, y:y});
    }
}

const clss = [
    tVect1,
    tVect2,
    tVect3,
    tVect4,
    tVect5,
]

//const iterations = 250000;
//const iterations = 1000000;
const iterations = 2500000;

describe('perf tests', () => {

    xit('performance to construct a vector', ()=>{
        for (const cls of clss) {
            let tag = `constructor test:${cls.name}`;
            console.time(tag);
            for (var i = 0; i < iterations; i++) {
                let v = new cls(1,2);
            };
            console.timeEnd(tag)
        }
    });

    it('performance to get property', ()=>{
        for (const cls of clss) {
            let tag = `get test:${cls.name}`;
            let v = new cls(1,2);
            console.time(tag);
            let x;
            for (var i = 0; i < iterations; i++) {
                x = v.x;
            };
            console.timeEnd(tag)
            expect(x).toEqual(1);
        }
    });

    it('performance to set property', ()=>{
        for (const cls of clss) {
            let tag = `set test:${cls.name}`;
            let v = new cls(1,2);
            console.time(tag);
            for (var i = 0; i < iterations; i++) {
                v.x = 5;
            };
            console.timeEnd(tag)
            expect(v.x).toEqual(5);
        }
    });

});


xdescribe('tproxy tests', () => {
    it('data changes trigger events', ()=>{
        class TData extends tproxy {
            static { Schema.apply(this, 'data'); }
            static { ExtEvtEmitter.apply(this) }
        };
        /*
        class TGizmoData extends GizmoData {
            static { 
                Schema.apply(this, 'sub', { link: true });
                ExtEvtEmitter.apply(this)
            };
        };
        */
        let o = new TData({data: 'foo'});
        expect(o.data).toEqual('foo');
        let receiver = ExtEvtReceiver.gen();
        let tevt;
        EvtSystem.listen(o, receiver, 'gizmo.set', (evt) => tevt = evt);
        o.data = 'bar';
        expect(tevt.tag).toEqual('gizmo.set');
        expect(tevt.actor).toBe(o);
        expect(tevt.set['data']).toEqual('bar');
    });
});
