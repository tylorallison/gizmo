export { GizmoData };

import { EvtSystem } from './event.js';
import { Fmt } from './fmt.js';

class GizmoHandle {
    static root(node) {
        while (node) {
            if (node.trunk) {
                node = node.trunk;
            } else {
                return node;
            }
        }
        return null;
    }

    static findInTrunk(node, filter) {
        for (let trunk=node.trunk; trunk; trunk=trunk.trunk) {
            if (filter(trunk)) return trunk;
        }
        return null;
    }

    static findInPath(node, filter) {
        for (let trunk=node; trunk; trunk=trunk.trunk) {
            if (filter(trunk)) return trunk;
        }
        return null;
    }

    static path(node) {
        let path = null;
        while (node.trunk) {
            let key = node.keyer();
            path = (path) ? `${key}.${path}` : key;
            node = node.trunk;
        }
        return path;
    }

    constructor(node) {
        this.node = node;
        this.trunk = null;
        this.proxy = null;
        this.schema = null;
        this.keyer = () => (this.schema) ? this.schema.key : '';
        this.get = this.iget;
        this.set = this.iset;
        this.pathEventable = EvtSystem.isEmitter(node.constructor.$schema);
        this.pathUpdatable = false;
        this.pathAutogen = false;
        this.pathReadonly = false;
        this.pathRenderable = false;
    }

    linkUpdate() {
        let trunk = this.trunk;
        if (trunk) {
            this.pathEventable = this.schema.eventable && trunk.pathEventable;
            this.pathUpdatable = !this.schema.nopathgen && (this.schema.atUpdate || trunk.pathUpdatable);
            this.pathAutogen = (this.schema.autogendeps.size || trunk.pathAutogen);
            this.pathReadonly = this.schema.readonly || trunk.pathReadonly;
            this.pathRenderable = this.schema.renderable || trunk.pathRenderable;
        } else {
            this.pathEventable = true;
            this.pathUpdatable = false;
            this.pathAutogen = false;
            this.pathReadonly = false;
            this.pathRenderable = false;
        }
        for (const aschema of Object.values(this.node.constructor.schema)) {
            let att = this[aschema.key];
            if (att && att instanceof tproxy) {
                att.$linker.linkUpdate();
            }
        }
    }

    // -- defines method to set new trunk link
    /**
     * @param {linker} trunk 
     * @param {schema} schema 
     * @param {*} keyer 
     */
    link(trunk, schema, keyer) {
        if (tproxy.findInPath(trunk.proxy, (gzd) => gzd === this.proxy)) {
            console.error(`hierarchy loop detected ${this.node} already in trunk: ${trunk}`);
            return;
        }
        // set link
        this.trunk = trunk;
        this.schema = schema;
        if (keyer) this.keyer = keyer;
        // update path variables for this node and all dependent branch nodes
        this.linkUpdate()
        this.node.atLink(trunk.proxy);
        // regenerate updates to autogenerated fields
        /*
        for (const agk of this.constructor.$autogenKeys) {
            let agschema = this.constructor.schema[agk];
            if (typeof agschema.autogen === 'function' && !agschema.autogen('$trunk')) continue;
            // reset autogenerated value to default, setter will take care of updating value
            if (agk in this) this[agk] = '#autogen#';
        }
        if (this.$pathAutogen) {
            for (const gzt of this.constructor.eachInPath(this, (gzn) => (gzn.$schema && gzn.$schema.autogendeps.size))) {
                for (const agk of gzt.$schema.autogendeps) if (agk in gzt.$trunk) gzt.$trunk[agk] = '#autogen#';
            }
        }
        */

    }

    unlink() {
        let trunk = this.trunk;
        this.trunk = null;
        this.schema = null;
        this.keyer = null;
        this.linkUpdate()
        this.node.atUnlink(trunk);

        // regenerate updates to autogenerated fields
        /*
        for (const agk of this.constructor.$autogenKeys) {
            let agschema = this.constructor.schema[agk];
            if (typeof agschema.autogen === 'function' && !agschema.autogen('$trunk')) continue;
            // reset autogenerated value to default, setter will take care of updating value
            if (agk in this) this[agk] = '#autogen#';
        }
        */

    }
        
    pget(target, key, receiver) {
        const value = target[key];
        if (value instanceof Function) {
            return function (...args) {
                return value.apply(this === receiver ? target : this, args);
            };
        }
        return value;
    }
    pset(target, key, value) {
        target[key] = value;
        return true;
    }
    iget(target, key, receiver) {
        //let schema = this.pclass.schema[key];
        let schema = this.node.constructor.$schema.map[key];
        if (schema && schema.getter) return schema.getter(target);
        //console.log(`key: ${key.toString()} this: ${this}`);
        if (key === '$linker') return this;
        if (key === '$target') return target;
        const value = target[key];
        if (value instanceof Function) {
            return function (...args) {
                return value.apply(this === receiver ? target : this, args);
            };
        }
        return target[key];
    };
    iset(target, key, value) {
        let storedValue = target[key];
        if (Object.is(storedValue, value)) return true;
        let schemas = this.node.constructor.$schema;
        let schema = (schemas) ? schemas.map[key] : null;
        //let schema = this.node.constructor.$schema.map[key];
        if (schema) {
            if (schema.setter) {
                value = schema.setter(target, value);
            }
            if (schema.link) {
                if (storedValue) storedValue.$linker.unlink();
                target[key] = value;
                if (value) value.$linker.link(this, schema);
            } else {
                target[key] = value;
            }

            // trigger update if attribute is eventable
            if (schema.eventable && this.pathEventable) {
                // find event emitter in path
                let root = target.constructor.root(this.proxy);
                // emit
                if (EvtSystem.isEmitter(root)) {
                    let path = this.constructor.path(this);
                    let key = (path) ? `${path}.${schema.key}` : schema.key;
                    let renderable = schema.renderable || this.pathRenderable;
                    EvtSystem.trigger(root, 'gizmo.set', { set: { [key]: value }, render: renderable });
                }
            }
        } else {
            target[key] = value;
        }

        return true;
    };
}

class GizmoData {
    static registry = new Map();
    static init() {
        if (!this.registry.has(this.name)) this.registry.set(this.name, this);
    }
    constructor(spec={}) {
        let cls = this.constructor;
        this.constructor.init();
        let handle = new GizmoHandle(this);
        let proxy = new Proxy(this, handle);
        handle.proxy = proxy;
        //console.log(`-- constructor: ${cls}`);
        //if (cls.$schema.parser) cls.$schema.parser(this, spec);
        for (const schema of cls.$schema.entries) {
            //console.log(`-- schema: ${schema}`);
            //proxy[schema.key] = schema.parser(this, spec);
            //this[schema.key] = schema.parser(this, spec);
            handle.set(this, schema.key, schema.parser(this, spec));
        }
        return proxy;
    }
    toString() {
        return Fmt.toString(this.constructor.name);
    }
}